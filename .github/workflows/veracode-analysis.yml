# Veracode scans
on:
  workflow_call:
    inputs:
      module_name:
        required: true
        type: string

    secrets:
      veracode_api_id:
        required: true
      veracode_api_key:
        required: true
      veracode_srcclr_token:
        required: true
      jira_base_url:
        required: true
      jira_user_email:
        required: true
      jira_api_token:
        required: true

jobs:
  build:
    name: Binary preparation
    runs-on: [self-hosted, common]
    outputs:
      fail_build: ${{ steps.routing-mode.outputs.fail_build }}
      development_stage: ${{ steps.routing-mode.outputs.development_stage }}
      display_summary: ${{ steps.routing-mode.outputs.display_summary }}
      enable_qg: ${{ steps.routing-mode.outputs.enable_qg }}
      php_version: ${{ steps.dep_manager.outputs.php_version }}
      skip_analysis: ${{ steps.routing-mode.outputs.skip_analysis }}

    steps:
      - name: Set routing mode
        id: routing-mode
        run: |
          ENABLE_QG="true"
          if [[ "${{ vars.VERACODE_QUALITY_GATE }}" == "false" ]] || [[ -n "${{ vars.VERACODE_EXCEPTION_ON_PR }}" && "${{ vars.VERACODE_EXCEPTION_ON_PR }}" == "${{ github.event.pull_request.number }}" ]]; then
            ENABLE_QG="false"
          fi

          CHECK_BRANCH=`echo "${{ github.ref_name }}" | cut -d'/' -f2`
          if [[ $CHECK_BRANCH != "merge" && '${{ github.event_name }}' != 'pull_request' && '${{ github.ref_name }}' == 'dev' ]]; then
            FAIL_BUILD="false"
            DEVELOPMENT_STAGE="Release"
            DISPLAY_SUMMARY="false"
          elif [[ $CHECK_BRANCH != "merge" && '${{ github.event_name }}' != 'pull_request' && '${{ github.ref_name }}' == 'dev' ]]; then
            FAIL_BUILD="$ENABLE_QG"
            DEVELOPMENT_STAGE="Testing"
            DISPLAY_SUMMARY="false"
          else
            FAIL_BUILD="$ENABLE_QG"
            DEVELOPMENT_STAGE="Development"
            DISPLAY_SUMMARY="true"
          fi

          # skip analysis of draft PR and analysis on development branches using workflow dispatch
          SKIP_ANALYSIS="true"
          if [[ "${{ github.event_name }}" == "pull_request" && -n "${{ github.event.pull_request.number }}" && -n "${{ github.event.pull_request.draft }}" && "${{ github.event.pull_request.draft }}" == "false" ]] || [[ "$DEVELOPMENT_STAGE" != "Development" ]]; then
            SKIP_ANALYSIS="false"
          fi

          echo "fail_build=$FAIL_BUILD" >> $GITHUB_OUTPUT
          echo "development_stage=$DEVELOPMENT_STAGE" >> $GITHUB_OUTPUT
          echo "display_summary=$DISPLAY_SUMMARY" >> $GITHUB_OUTPUT
          echo "enable_qg=$ENABLE_QG" >> $GITHUB_OUTPUT
          echo "skip_analysis=$SKIP_ANALYSIS" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        if: steps.routing-mode.outputs.skip_analysis == 'false'

      - name: Generate binary file
        if: steps.routing-mode.outputs.skip_analysis == 'false'
        uses: ./.github/actions/veracode-generate-binary
        with:
          cache_key: "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary"

  pipeline-scan:
    needs: [build]
    name: Run a pipeline scan
    if: needs.build.outputs.skip_analysis == 'false'
    runs-on: [self-hosted, common]

    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Get build binary
        uses: actions/cache/restore@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary.zip"
          key: "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary"
          fail-on-cache-miss: true

      - name: Get baseline files
        run: |
          set -e
          # Install aws cli
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          sudo unzip -q awscliv2.zip
          sudo ./aws/install

          # Find baseline file
          baseline_file_path=""
          create_baseline_from=""
          BUCKET="s3://centreon-veracode-reports/${{ inputs.module_name }}"
          if [[ "${{ needs.build.outputs.development_stage }}" == "Release" ]]; then
            TARGETS=( "${{ github.base_ref || github.ref_name }}" master )
          else
            TARGETS=( "${{ github.base_ref || github.ref_name }}" dev )
          fi

          for TARGET in ${TARGETS[@]}; do
            RESULT=0
            echo "[INFO] - Searching baseline file for $TARGET's"
            aws s3 ls "$BUCKET/$TARGET/results.json" || RESULT=$( echo $? )
            if [[ $RESULT -eq 0 ]]; then
              aws s3 cp "$BUCKET/$TARGET/results.json" "/tmp/results.json"
              echo "[INFO] - Found $TARGET's baseline file"
              baseline_file_path="/tmp/results.json"
              create_baseline_from="standard"
              break
            else
              echo "::warning::Baseline file not found for branch $TARGET"
            fi
          done

          echo "baseline_file=$baseline_file_path" >> $GITHUB_ENV
          echo "create_baseline_from=$create_baseline_from" >> $GITHUB_ENV
          cat $GITHUB_ENV

      - uses: actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9 # v4.2.1
        with:
          distribution: 'zulu'
          java-version: 8

      - name: Pipeline scan
        uses: veracode/Veracode-pipeline-scan-action@fe0924c134a03ab5a74fcb9722ed8456efa48e17 # v1.0.16
        continue-on-error: ${{ vars.VERACODE_CONTINUE_ON_ERROR == 'true' }}
        with:
          vid: "vera01ei-${{ secrets.veracode_api_id }}"
          vkey: "vera01es-${{ secrets.veracode_api_key }}"
          file: "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary.zip"
          baseline_file: "${{ env.baseline_file }}"
          create_baseline_from: "${{ env.create_baseline_from }}"
          fail_build: '${{ needs.build.outputs.fail_build }}'
          fail_on_severity: "'Very High','High'"
          timeout: 60
          development_stage: '${{ needs.build.outputs.development_stage }}'
          summary_display: '${{ needs.build.outputs.display_summary }}'
          issue_details: '${{ needs.build.outputs.display_summary }}'

  clean-artifact:
    needs: [pipeline-scan]
    name: Clean artifact
    if: success() || failure()
    runs-on: [self-hosted, common]

    steps:
      - uses: geekyeggo/delete-artifact@24928e75e6e6590170563b8ddae9fac674508aa1 # v5.0.0
        with:
          name: "Veracode Pipeline-Scan Results"

  policy-scan:
    needs: [build]
    name: Run a sandbox scan
    # only stable and unstable maintenances branches will produce a report
    #if: needs.build.outputs.development_stage != 'Development'
    runs-on: [self-hosted, common]

    steps:
      - name: Get build binary
        uses: actions/cache/restore@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary.zip"
          key: "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary"
          fail-on-cache-miss: true

      - name: Sandbox scan
        uses: veracode/veracode-uploadandscan-action@f7e1fbf02c5c899fba9f12e3f537b62f2f1230e1 # 0.2.7
        continue-on-error: ${{ vars.VERACODE_CONTINUE_ON_ERROR == 'true' }}
        with:
          appname: "support_${{ inputs.module_name }}"
          version: "${{ needs.build.outputs.development_stage }}_runId-${{ github.run_id }}"
          filepath: "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary.zip"
          vid: "vera01ei-${{ secrets.veracode_api_id }}"
          vkey: "vera01es-${{ secrets.veracode_api_key }}"
          createprofile: true
          createsandbox: true
          sandboxname: "support_drawio_${{ github.ref_name }}"
          scantimeout: 120
          includenewmodules: true
          scanallnonfataltoplevelmodules: true
          deleteincompletescan: 1
          scanpollinginterval: 120  # time between two checks in seconds / [30 to 120]

  sca-scan:
    needs: [build]
    name: Run a SCA scan
    # only stable and unstable maintenance branches will produce a report
    if: needs.build.outputs.development_stage != 'Development'
    runs-on: [self-hosted, common]
    continue-on-error: ${{ vars.VERACODE_CONTINUE_ON_ERROR == 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Set up Node
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: 16

      - name: Install yarn
        run: npm install -g yarn

      - name: SCA scan
        env:
          SRCCLR_API_TOKEN: ${{ secrets.veracode_srcclr_token }}
          SRCCLR_REGION: "ER"

        uses: sc979/veracode-sca@c407924976db886ffb1bfdbbbf3463f0939f835d # v1.11
        # This action is based on the following command:
        # curl -sSL https://download.sourceclear.com/ci.sh | sh -s -- scan "./${{ inputs.module_directory }}" --debug
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          create-issues: false
          allow-dirty: true
          recursive: true
